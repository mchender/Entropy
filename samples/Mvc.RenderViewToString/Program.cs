// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using System;
using System.Diagnostics;
using System.IO;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Hosting.Internal;
using Microsoft.AspNetCore.Mvc.Razor;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.FileProviders;
using Microsoft.Extensions.ObjectPool;
using Microsoft.Extensions.PlatformAbstractions;

namespace Mvc.RenderViewToString
{
    public class Program
    {
        public static void Main()
        {
            var helper = InitializeServices();
            var emailContent = RenderViewAsync(helper).Result;

            Console.WriteLine(emailContent);
            Console.ReadLine();
        }

        public static RazorViewToStringRenderer InitializeServices(string customApplicationBasePath = null)
        {
            // Initialize the necessary services
            var services = new ServiceCollection();
            ConfigureDefaultServices(services, customApplicationBasePath);

            // Add a custom service that is used in the view.
            services.AddSingleton<EmailReportGenerator>();

            var serviceProvider = services.BuildServiceProvider();
            ServiceProviderProvider.ServiceProvider = serviceProvider;
            return serviceProvider.GetRequiredService<RazorViewToStringRenderer>();
        }

        public static Task<string> RenderViewAsync(RazorViewToStringRenderer helper)
        {

            var model = new EmailViewModel
            {
                UserName = "User",
                SenderName = "Sender",
                UserData1 = 1,
                UserData2 = 2
            };

            string template = $@"
                                    <!DOCTYPE html>

                                    <html>
                                    <body>
                                        <div>
                                            @model Mvc.RenderViewToString.EmailViewModel

                                    `       Hello @Model.UserName,
        
                                            <p>

                                                This is a generic email about something.<br />

                                                It also contains some content that is generated by a partial view.<br />
                                                @inject Mvc.RenderViewToString.EmailReportGenerator ReportGenerator

                                                This is the partial view content.<br />
                                                @ReportGenerator.GenerateReport(Model.UserData1, Model.UserData2).<br />
                                                <br />
                                            </p>
                                        </div>
                                        <footer>
                                            Thanks,<br />
                                            @Model.SenderName
                                        </footer>
                                    </body>
                                    </html>
                                    ";

            return helper.RenderViewToStringAsync(template, model);
        }

        private static void ConfigureDefaultServices(IServiceCollection services, string customApplicationBasePath)
        {
            var applicationEnvironment = PlatformServices.Default.Application;
            IFileProvider fileProvider = new CacheFileProvider();
            services.AddSingleton<IHostingEnvironment>(new HostingEnvironment
            {
                ApplicationName =  applicationEnvironment.ApplicationName,
                WebRootFileProvider = fileProvider,
            });
            services.Configure<RazorViewEngineOptions>(options =>
            {
                options.FileProviders.Clear();
                options.FileProviders.Add(fileProvider);
            });
            var diagnosticSource = new DiagnosticListener("Microsoft.AspNetCore");
            services.AddSingleton<ObjectPoolProvider, DefaultObjectPoolProvider>();
            services.AddSingleton<DiagnosticSource>(diagnosticSource);
            services.AddLogging();
            services.AddMvc();
            services.AddTransient<RazorViewToStringRenderer>();
        }
    }
}
